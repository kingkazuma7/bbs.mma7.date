# ✍️ コミットメッセージのルール (Conventional Commits 準拠)

コミットメッセージは以下のフォーマットに従うこと。

`<type>: <description>`

## 必須の `<type>`
* **feat**: 新機能の追加、または既存機能の拡張。
* **fix**: バグの修正。
* **docs**: ドキュメントのみの変更（README, コメントなど）。
* **style**: コードの動作に影響しない修正（フォーマット、セミコロン、空白行など）。
* **refactor**: バグ修正や新機能追加ではない、コードの構造的改善（リファクタリング）。
* **perf**: パフォーマンス改善に関する変更。
* **test**: テストコードの追加または修正。
* **chore**: ビルドプロセス、補助ツール、ライブラリ管理など、その他の変更。

## `<description>`
* 簡潔に、**命令形**で記述する（例: `fix: 投稿機能のバリデーションを修正`）。
* 最初の文字は**大文字**にしない。
* 末尾に**ピリオド**を付けない。

---

# 💻 Laravel/PHPのコーディング規約（PSR-12準拠）

基本的なPHPの標準規約 **PSR-12** に従うこと。

## クラス・メソッド
* **クラス名**は `CamelCase` (例: `EventController`)。
* **メソッド名**は `camelCase` (例: `storePost`)。

## 変数・プロパティ
* **変数名**は `snake_case` (例: `event_id`, `$user_name`)。

## Bladeテンプレート
* HTMLとPHPロジックの分離を意識し、Bladeでは複雑な処理は避けること。

---

# 💾 データベースとマイグレーションのルール

* **テーブル名**は**複数形**のスネークケース (例: `posts`, `fighters`)。
* **モデル名**は**単数形**のパスカルケース (例: `Post`, `Fighter`)。
* **外部キー**は `単数形_id` (例: `thread_id`)。
* DBスキーマの変更は必ず **マイグレーション** (`php artisan make:migration`) で行うこと。

---

# 🔒 セキュリティとバリデーション

* ユーザーから受け取るデータは、必ず **バリデーション** を行うこと。
    * (Laravelで `$request->validate([...])` を利用する。)
* 全てのフォーム投稿には **CSRF保護** (`@csrf`ディレクティブ) を含めること。